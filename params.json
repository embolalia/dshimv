{"name":"dshimv","tagline":"A shim to allow systemd service unit files to be used as SysV init scripts","body":"[RHEL  7 is out][1], and ships with systemd, and CentOS 7 will be doing the\r\nsame shortly.. [Debian][2] and [Ubuntu][3] are planning it for their future\r\nreleases. Soon, systemd will be a de facto standard for new Linux distro\r\nreleases. But the chances of all your users being on new releases any time in\r\nthe near future could be pretty low. ([One poor soul][4] still has customers on\r\nRHEL 4.)\r\n\r\nSo you have some choices. If you want to use any of systemd's new features,\r\nyou'll have to either abandon the users who can't or won't upgrade, or maintain\r\ninit stuff for both SysV and systemd. Or, you can use `dshimv`.\r\n\r\n`dshimv` lets you plop your systemd service unit file into your `/etc/init.d`\r\njust as if it were a regular SysV init script by just adding one extra line to\r\nit.\r\n\r\n# How it works\r\n\r\nAny Linux developer is at least a little familiar with `#!` - two magic\r\ncharacters at the beginning of a script to tell it what interpreter to use. But\r\nnothing limits it to scripts; all `#!` does is run whatever command you give it\r\nadding file name as an argument, followed by whatever arguments you gave when\r\nyou executed the file (So if `foo.py` has `#!/usr/bin/env python`,\r\n`./foo.py bar` runs `/usr/bin/env python foo.py bar`). That command can do\r\nwhatever it wants with the file.\r\n\r\n`dshimv` is a program that takes a systemd service unit file and an action. It\r\nparses the file and gets the command associated with that action, and runs it.\r\nSo if you take a systemd service unit file, and throw a `#!` at the top\r\npointing to `dshimv`, you now have an executable that acts just like a SysV\r\nInit script.\r\n\r\n# How to use it\r\n\r\n1. Install `dshimv` by placing the `dshimv` file in `/usr/bin`.\r\n2. Add `#!/usr/bin/dshimv` to the first line ofyour systemd service unit file\r\n3. Put that unit file in `/etc/init.d`\r\n4. `chown root:root /etc/init.d/$YOUR_FILE; chmod 0700 /etc/init.d/$YOUR_FILE`\r\n5. `service $YOUR_FILE start`\r\n\r\n# Limitations\r\n\r\nObviously, anything that SysV Init isn't able to handle, `dshimv` can't do\r\neither. You can use `dshimv` with Upstart, but while Upstart does have some\r\nfeatures beyond SysV that it shares with systemd, `dshimv` doesn't make any\r\nattempt to expose that.\r\n\r\nAdditionally, `dshimv` currently uses Python's `ConfigParser` to parse\r\nfiles, and that may or may not have some differences from how systemd parses in\r\nsome edge cases. For simplicity, `dshimv` also uses simple shell execution of\r\nthe specified commands, rather than the limited subset that systemd does. This\r\nmeans `dshimv` is a bit more permissive about what's valid than systemd.\r\nFinally, there is almost certainly a performance detriment to using `dshimv`\r\nover native scripts, though only when starting/stopping/etc. a service.\r\n\r\n[1]: http://developerblog.redhat.com/2014/06/10/red-hat-enterprise-linux-7-now-generally-available/\r\n[2]: https://lwn.net/Articles/585363/\r\n[3]: http://www.markshuttleworth.com/archives/1316\r\n[4]: http://www.reddit.com/r/linux/comments/27sbwc/red_hat_enterprise_linux_7_now_generally_available/ci3x348\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}