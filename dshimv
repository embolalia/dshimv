#!/usr/bin/env python
# coding=utf8
"""dshimv - A shim to allow systemd service unit files to be used as SysV init
scripts"""

import ConfigParser
import grp
import os
import pwd
import subprocess
import sys


class ServiceUnit(object):
    def __init__(self, script_file):
        self.parser = ConfigParser.SafeConfigParser()
        self.parser.read(script_file)
        self.unit_name = os.path.basename(script_file)
        pid_fname = '/var/run/{0}.pid'.format(self.unit_name)
        self.pid_fname = self._get('PIDFile', pid_fname)
        pid_dir = os.path.dirname(self.pid_fname)
        if not os.path.isdir(pid_dir):
            os.mkdir(pid_dir)
        self._type = self._get('Type', 'simple')
        self.environ = os.environ.copy()

    def _set_user(self):
        """Change to the user specified in the service file"""
        try:
            user = self._get('User')
        except KeyError:
            return

        if user.isdigit():
            pwd_entry = pwd.getpwuid(user)
        else:
            pwd_entry = pwd.getpwnam(user)
        self.environ['HOME'] = pwd_entry.pw_dir
        self.environ['LOGNAME'] = pwd_entry.pw_name
        self.environ['USER'] = pwd_entry.pw_name
        self.environ['SHELL'] = pwd_entry.pw_shell

        group = self._get('Group', False)
        if group:
            grp_entry = grp.getgrgid(int(group))
        else:
            grp_entry = grp.getgrgid(pwd_entry.pw_gid)
        os.setgid(grp_entry.gr_gid)
        os.setuid(pwd_entry.pw_uid)

    def _get(self, name, default=None):
        """Grab a [Service] section value, or a default if not present."""
        try:
            value = self.parser.get('Service', name)
        except ConfigParser.Error:
            if default is not None:
                value = default
            else:
                raise KeyError
        return value

    def _exec(self, action):
        """Executes the given action and returns the Popen object"""
        proc = subprocess.Popen(action, shell=True, env=self.environ,
                                preexec_fn=self._set_user)
        return proc

    def _exec_with_pid(self, action):
        """Same as _exec, but sets $MAINPID first"""
        self.environ['MAINPID'] = self.get_pid()
        return self._exec(action)

    def get_pid(self):
        with open(self.pid_fname) as pid_file:
            pid = pid_file.readline()
        return pid.strip()

    # # # # LSB standard actions # # # #

    def start(self):
        try:
            action = self._get('ExecStartPre')
        except KeyError:
            pass
        else:
            self._exec(action)

        action = self._get('ExecStart')
        proc = self._exec(action)
        with open(self.pid_fname, 'w') as pid_file:
            pid_file.write(str(proc.pid))

        # oneshot and forking both expect the process that gets called to
        # finish before we continue. We can do that for them.
        if self._type in ('oneshot', 'forking'):
            proc.wait()

        try:
            action = self._get('ExecStartPost')
        except KeyError:
            pass
        else:
            self._exec(action)

    def stop(self):
        action = self._get('ExecStop')
        self._exec_with_pid(action)

        try:
            action = self._get('ExecStopPost')
        except KeyError:
            pass
        else:
            self._exec(action)

    def restart(self):
        self.stop()
        self.start()

    def reload_(self):
        action = self._get('ExecReload')
        self._exec_with_pid(action)

    def force_reload(self):
        try:
            action = self._get('ExecReload')
            self._exec_with_pid(action)
        except KeyError:
            self.stop()
            self.start()

    def status(self):
        # TODO exit(2) if /var/lock file exists?
        try:
            pid = self.get_pid()
        except IOError:
            exit_ = 3
        else:
            try:
                os.kill(int(pid), 0)
            except OSError:
                exit_ = 1
            else:
                exit_ = 0
        if exit_ == 0:
            print('Service {} running with PID {}'.format(self.unit_name, pid))
        else:
            print('Service {} not running'.format(self.unit_name))
        sys.exit(exit_)


def main(argv=None):
    argv = argv or sys.argv
    usage = ('Invalid arguments.\n'
             'Usage: <service> '
             '(start|stop|restart|reload|force-reload|status)')
    if len(argv) != 3:
        print >> sys.stderr, usage
        sys.exit(2)

    _, script_file, action = argv
    unit = ServiceUnit(script_file)
    if action == 'start':
        unit.start()
    elif action == 'stop':
        unit.stop()
    elif action == 'restart':
        unit.restart()
    elif action == 'reload':
        unit.reload_()
    elif action == 'force-reload':
        unit.force_reload()
    elif action == 'status':
        unit.status()
    else:
        print >> sys.stderr, usage
        sys.exit(2)

if __name__ == '__main__':
    main()
